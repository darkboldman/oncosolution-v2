---
// src/components/Pagination.astro
import type { Page } from 'astro'; // Astro's Page type

// Define the expected props for the Pagination component
export interface Props {
  page: Page<any>; // Using Page<any> to keep it generic for different content types
  base: string;    // The base path for this paginated section, e.g., "/blog" or "/projects"
}

const { page } = Astro.props; 
// Make base prop optional with a default, or ensure it's always passed
const base = Astro.props.base || Astro.url.pathname.split('/page/')[0].replace(/\/$/, '') || '/';


// Helper function to clean base path
function cleanBase(basePath: string): string {
  if (!basePath) return '/'; 
  return basePath.replace(/\/$/, '') || '/'; 
}

// Helper function to generate page URLs
function getPageUrl(pageNum: number, basePath: string): string {
  const clean = cleanBase(basePath);
  if (pageNum === 1) {
    return clean === '/' ? '/' : clean; 
  }
  return `${clean}/${pageNum}`; 
}

// Generate page numbers to show (includes logic for ellipses if there are many pages)
function getPageNumbers(currentPage: number, lastPage: number): (number | string)[] {
  const pages: (number | string)[] = [];
  const delta = 1; 
  const left = currentPage - delta;
  const right = currentPage + delta + 1; 
  let l: number | undefined = undefined;

  for (let i = 1; i <= lastPage; i++) {
    if (i === 1 || i === lastPage || (i >= left && i < right)) {
      if (l !== undefined) {
        if (i - l === 2) {
          pages.push(l + 1);
        } else if (i - l !== 1) {
          pages.push('...'); 
        }
      }
      pages.push(i);
      l = i;
    }
  }
  return pages;
}

const pageNumbers = getPageNumbers(page.currentPage, page.lastPage);
const cleanedBasePath = cleanBase(base);

const navAriaLabel = `${cleanedBasePath.substring(1).replace(/-/g, ' ').replace(/\b\w/g, char => char.toUpperCase()) || 'Site'} Pagination`;
---

{page.lastPage > 1 && (
  <nav class="pagination" aria-label={navAriaLabel}>
    <div class="pagination-container">
      {page.url.prev ? (
        <a 
          href={page.url.prev} 
          class="pagination-btn pagination-prev"
          aria-label="Go to previous page"
        >
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="pagination-icon">
            <path d="M15 18l-6-6 6-6"/>
          </svg>
          Previous
        </a>
      ) : (
        <span class="pagination-btn pagination-prev pagination-disabled" aria-disabled="true">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="pagination-icon">
            <path d="M15 18l-6-6 6-6"/>
          </svg>
          Previous
        </span>
      )}

      <div class="pagination-numbers">
        {pageNumbers.map((pageNumOrDots) => {
          if (typeof pageNumOrDots === 'string') { 
            return (
              <span class="pagination-ellipsis" aria-hidden="true">
                {pageNumOrDots}
              </span>
            );
          }
          
          const pageNum = pageNumOrDots; 
          const pageUrl = getPageUrl(pageNum, cleanedBasePath);
          const isCurrentPage = pageNum === page.currentPage;
          
          return isCurrentPage ? (
            <span 
              class="pagination-number pagination-current" 
              aria-current="page"
              aria-label={`Current page, page ${pageNum}`}
            >
              {pageNum}
            </span>
          ) : (
            <a 
              href={pageUrl} 
              class="pagination-number"
              aria-label={`Go to page ${pageNum}`}
            >
              {pageNum}
            </a>
          );
        })}
      </div>

      {page.url.next ? (
        <a 
          href={page.url.next} 
          class="pagination-btn pagination-next"
          aria-label="Go to next page"
        >
          Next
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="pagination-icon">
            <path d="M9 18l6-6-6-6"/>
          </svg>
        </a>
      ) : (
        <span class="pagination-btn pagination-next pagination-disabled" aria-disabled="true">
          Next
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="pagination-icon">
            <path d="M9 18l6-6-6-6"/>
          </svg>
        </span>
      )}
    </div>

    <div class="pagination-info">
      <span>
        Showing {page.start === 0 && page.data?.length === 0 ? 0 : page.start + 1} to {page.end + 1 > page.total ? page.total : page.end + 1} of {page.total} results
      </span>
    </div>
  </nav>
)}

<style>
  /* Using your color palette variables - ensure they are defined in global.css */
  .pagination {
    margin: 2rem 0;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
    font-family: var(--font-family-sans-serif, sans-serif);
  }

  .pagination-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .pagination-btn,
  .pagination-number {
    display: inline-flex;
    align-items: center;
    gap: 0.35rem;
    padding: 0.5rem 1rem;
    border: 1px solid var(--medium-gray, #ddd);
    border-radius: var(--border-radius, 4px);
    background: var(--light-bg, white);
    color: var(--text-color, #374151);
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.2s ease;
    line-height: 1.2;
  }
  .pagination-icon {
    /* Styles for SVG icons if needed */
  }

  .pagination-btn:hover:not(.pagination-disabled),
  .pagination-number:hover:not(.pagination-current) { 
    background: var(--primary-color);
    border-color: var(--primary-color);
    color: var(--text-light, white);
  }
  
  .pagination-btn:focus:not(.pagination-disabled),
  .pagination-number:focus:not(.pagination-current) {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
  }

  .pagination-disabled,
  .pagination-btn.pagination-disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
    background: var(--light-gray, #f9f9f9);
    border-color: var(--medium-gray, #ddd);
    color: var(--secondary-color, #666);
  }

  .pagination-numbers {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .pagination-number {
    justify-content: center;
    min-width: 2.5rem; 
    height: 2.5rem;
  }

  .pagination-current { 
    background: var(--primary-color);
    border-color: var(--primary-color);
    color: var(--text-light, white);
    font-weight: 600;
    cursor: default;
  }
  .pagination-current:hover { 
    background: var(--primary-color);
    border-color: var(--primary-color);
    color: var(--text-light, white);
  }

  .pagination-ellipsis {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    color: var(--secondary-color, #6b7280);
    font-size: 0.875rem;
  }

  .pagination-info {
    color: var(--secondary-color, #6b7280);
    font-size: 0.875rem;
    text-align: center;
  }

  @media (max-width: 640px) {
    .pagination-container {
      gap: 0.35rem;
    }
    .pagination-btn,
    .pagination-number {
      padding: 0.375rem 0.75rem;
      font-size: 0.8125rem;
      min-width: 2.25rem;
      height: 2.25rem;
    }
    .pagination-ellipsis {
      width: 2.25rem;
      height: 2.25rem;
    }
    .pagination-info {
      font-size: 0.8125rem;
    }
  }
</style>
