---
// src/components/ProductCategoryFilterBar.astro
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import categoriesData from '../data/categories.json';

interface CategoryJsonItem {
  id: string;
  name: string;
  image: string; // Expects path like "/src/assets/images/categories/cat-image.jpg"
  isFeatured?: boolean; // Not used for sizing here, but data is available
}

interface CategoryFilterItem {
  id: string;
  name: string;
  link: string;
  imageMeta?: ImageMetadata;
  isActive?: boolean; // To style the currently active filter
}

// Get all category images
const allCategoryImages = import.meta.glob<{ default: ImageMetadata }>(
  '/src/assets/images/categories/**/*.{jpeg,jpg,png,webp,gif,svg}',
  { eager: true }
);

const imageMetaMap = new Map<string, ImageMetadata>();
for (const path in allCategoryImages) {
  imageMetaMap.set(path, allCategoryImages[path].default);
}

// Prepare categories for display
let displayItems: CategoryFilterItem[] = categoriesData.map((categoryJson: any) => {
  const category = categoryJson as CategoryJsonItem;
  let imageMeta: ImageMetadata | undefined = undefined;
  if (imageMetaMap.has(category.image)) {
    imageMeta = imageMetaMap.get(category.image);
  } else {
    console.warn(`[CategoryFilterBar] Image not found for category "${category.name}" at path: ${category.image}.`);
  }
  return {
    id: category.id,
    name: category.name,
    imageMeta: imageMeta,
    link: `/products/category/${category.id}` // Link to specific category page
  };
});

// Add "All Products" tile at the beginning
displayItems.unshift({
  id: "all",
  name: "All Products",
  link: "/products", // Link to the base products page (page 1 of all products)
  imageMeta: undefined, // No specific image for "All", or you can assign one
});

// Determine active filter based on current URL
// This assumes your product listing pages will pass down the current category slug or filter type
const { currentFilterId = "all" } = Astro.props; // Default to "all"

displayItems = displayItems.map(item => ({
  ...item,
  isActive: item.id === currentFilterId
}));
---

<div class="category-filter-bar-wrapper">
  <div class="container">
    <div class="filter-tiles-scroll-container">
      {displayItems.map(item => (
        <a 
          href={item.link} 
          class:list={["filter-item", { active: item.isActive }]}
          title={`View ${item.name}`}
        >
          {item.imageMeta && (
            <div class="filter-item-image-wrapper">
              <Image 
                src={item.imageMeta} 
                alt={`${item.name} icon`}
                class="filter-item-image"
                width={24} 
                height={24}
                format="webp"
                quality="mid"
                loading="lazy"
              />
            </div>
          )}
          {!item.imageMeta && item.id !== 'all' && ( /* Placeholder if imageMeta fails for a specific category */
            <div class="filter-item-image-placeholder material-symbols-outlined">category</div>
          )}
          {item.id === 'all' && !item.imageMeta && ( /* Icon for "All Products" if no image specified */
             <div class="filter-item-image-placeholder material-symbols-outlined">widgets</div>
          )}
          <span class="filter-item-name">{item.name}</span>
        </a>
      ))}
    </div>
  </div>
</div>

<style>
  .category-filter-bar-wrapper {
    padding: 1rem 0 1.5rem 0; /* Padding for the section */
    background-color: var(--light-gray); /* Light background for the bar */
    border-bottom: 1px solid var(--medium-gray);
  }

  .container {
    /* Uses global container styles */
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .filter-tiles-scroll-container {
    overflow-x: auto; /* Allow horizontal scrolling if many categories */
    white-space: nowrap; /* Keep items in a single line */
    padding-bottom: 10px; /* Space for scrollbar if it appears */
    margin-bottom: -10px; /* Counteract padding for layout */
  }
  /* Hide scrollbar for a cleaner look, but still scrollable */
  .filter-tiles-scroll-container::-webkit-scrollbar {
    display: none; /* For Chrome, Safari, and Opera */
  }
  .filter-tiles-scroll-container {
    -ms-overflow-style: none;  /* For Internet Explorer and Edge */
    scrollbar-width: none;  /* For Firefox */
  }


  .filter-item {
    display: inline-flex; /* Align image and text inline */
    align-items: center;
    padding: 0.6rem 1rem;
    margin-right: 0.75rem; /* Space between tiles */
    border: 1px solid var(--medium-gray);
    border-radius: var(--border-radius); /* Pill shape or regular radius */
    background-color: var(--light-bg, #fff);
    color: var(--text-color);
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  }
  .filter-item:last-child {
    margin-right: 0;
  }

  .filter-item:hover {
    background-color: var(--primary-color);
    color: var(--text-light);
    border-color: var(--primary-color);
    box-shadow: 0 2px 6px rgba(var(--primary-color-rgb, 41, 164, 240), 0.3);
  }

  .filter-item.active {
    background-color: var(--dark-blue);
    color: var(--text-light);
    border-color: var(--dark-blue);
    font-weight: 600;
  }

  .filter-item-image-wrapper {
    width: 24px; /* Match image width */
    height: 24px; /* Match image height */
    margin-right: 0.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden; /* If images are not perfectly square */
    border-radius: 3px; /* Slight rounding for image container */
  }
  .filter-item-image { /* Targets img from <Image /> */
    width: 100%;
    height: 100%;
    object-fit: contain; /* Or 'cover', depending on desired look for small icons */
  }
  .filter-item-image-placeholder {
    width: 24px;
    height: 24px;
    margin-right: 0.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem; /* Size for material symbol icon */
    color: var(--secondary-color);
  }
  .filter-item.active .filter-item-image-placeholder {
    color: var(--text-light); /* Change placeholder color if active */
  }


  .filter-item-name {
    white-space: nowrap; /* Prevent category name from wrapping */
  }
</style>
